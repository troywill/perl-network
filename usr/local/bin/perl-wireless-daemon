#!/usr/bin/env perl
use warnings;
use strict;
$| = 1;
use IO::Socket;
use IO::File;
use POSIX qw(WNOHANG setsid);

use constant PORT => 12000;
use constant PID_FILE => '/tmp/perl-daemon.pid';
my $quit = 0;

my $fh = open_pid_file(PID_FILE);

# signal handler for child die events
$SIG{CHLD} = sub { while ( waitpid(-1,WNOHANG)>0 ) { } };
$SIG{TERM} = $SIG{INT} = sub { $quit++ };

my $listen_socket = IO::Socket::INET->new(LocalPort => shift || PORT,
					  Listen => 20,
					  Proto => 'tcp',
					  Reuse => 1,
					  Timeout => 60*60,
					 );

die "Not able to create a listening socket: $@" unless $listen_socket;

warn "$0 starting...\n";
my $pid = become_daemon();
print $fh $pid;
close $fh;

open ( my $log_file, '>', '/tmp/perl-daemon.log') || die;
open ( my $essid_file, '<', '/tmp/essid') || die;
chomp(my $essid = <$essid_file>);
close $essid_file;
while (!$quit) {
    chomp(my $carrier = `cat /sys/class/net/wlan0/carrier`);
    if ( $carrier == 0 ) {
	system("perl-wireless-connect");
	chomp( my $date = `date` );
	print $log_file time, ", $essid lost at\n";
	my $oldh = select( $log_file );
	$| = 1;
	select( $oldh );
    }
    sleep 1;
  # next unless my $connection = $listen_socket->accept;
  
  # die "Not able to fork: $!" unless defined (my $child = fork());
  # if ($child == 0) {
  #   $listen_socket->close;
  #   interact($connection);
  #   exit 0;
  # }
}

sub open_pid_file {
    my $file = shift;
    if (-e $file) {
	my $fh = IO::File->new($file) || return;
	my $pid = <$fh>;
	die "Server already running with PID $pid" if kill 0 => $pid;
	warn "Removing PID file for defunct server process $pid.\n";
	die "Not able to unlink PID file $file" unless -w $file && unlink $file;
    }
    return IO::File->new($file,O_WRONLY|O_CREAT|O_EXCL,0644) or die "Not able to create $file: $!\n";
}
    


sub become_daemon {
  die 'Not able to fork' unless defined (my $child = fork);
  exit 0 if $child; # parent dies
  setsid(); # become session leader
  open(STDIN, '</dev/null');
  open(STDOUT, '>/dev/null');
  open(STDERR, '>&STDOUT');
  chdir '/'; # change working directory
  umask(0); # forget file mode creation mask
  $ENV{PATH} = '/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin';
  return $$;
}
