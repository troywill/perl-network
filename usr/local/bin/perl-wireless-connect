#!/usr/bin/env perl
use warnings;
use strict;
my $VERBOSE            = 1;
my $CARRIER_SYS_FILE = '/sys/class/net/wlan0/carrier';
my $OPERSTATE_SYS_FILE = '/sys/class/net/wlan0/operstate';
my $SUDO_BINARY = '/usr/bin/sudo';
my $WIRELESS_INTERFACE = 'wlan0';
my $SUDO               = &get_sudo($SUDO_BINARY);
my $SCAN_COMMAND       = "${SUDO} iwlist ${WIRELESS_INTERFACE} scanning";
use constant WIRELESS_FILE => '/usr/local/etc/wireless/00';

my $carrier = &get_carrier( $CARRIER_SYS_FILE );
exit if ( $carrier == 1 );
my %known_macs         = &read_known_networks(WIRELESS_FILE);
&bring_up_wireless_interface($WIRELESS_INTERFACE);
&wait_for_interface();
my @network_scan   = `$SCAN_COMMAND`;
my %available_macs = &available_networks(@network_scan);
&print_message_marv();
&connect_to_secure_network();
exit if ( $carrier == 1 );
&search_for_open_networks();

sub connect_to_secure_network {
    foreach my $mac ( keys %known_macs ) {
	if ( $available_macs{$mac} ) {
	    print
		"==> Network '$available_macs{$mac}{essid}' found, connecting ...\n";
	    &connect_to_network_by_mac( $mac, \%known_macs, \%available_macs );
	    open( my $essid_file, '>', '/tmp/essid' )
		|| die "Unable to open /tmp/essid for output";
	    print $essid_file "$mac\n";
	    close $essid_file;
	}
    }
}

sub search_for_open_networks {
    my %open_networks =
	( 'Wayport_Access' => 'McDonalds' );
    foreach my $mac ( keys %available_macs ) {
	if ( $available_macs{$mac}{encryption} eq 'off' ) {
	    foreach my $essid ( keys %open_networks ) {
		if ( $essid eq $available_macs{$mac}{essid} ) {
		    &connect_to_open_network($essid);
		}
	    }
	}
    }
}

system("perl-wireless-daemon");

sub connect_to_open_network {
    my $essid = shift;
    print "DEBUG: wait_for_interface...\n"; &wait_for_interface();
    print "==> Connecting to open network [$essid]\n";
    system("$SUDO /usr/sbin/iwconfig wlan0 essid $essid");
    system("$SUDO dhcpcd --rebind wlan0");
    exit;
}

sub connect_to_network_by_mac {

# %HoH is hash of available wireless cell hashes from external program ( iwlist scanning )
    my ( $mac, $known_macs_ref, $HoH_ref ) = @_;
    my %known_macs_ref = %{$known_macs_ref};
    my %HoH            = %{$HoH_ref};

    if ( $HoH{$mac}{security} eq 'WEP' ) {
        my $key = $known_macs{$mac}{key};
        &connect_to_wep( $key, $HoH{$mac}{essid} );
    }
}

sub connect_to_wep {
    my ( $key, $essid ) = @_;
    print "==> [$key][$essid]\n";
    system("$SUDO /usr/sbin/iwconfig wlan0 key $key essid $essid");
    system("$SUDO dhcpcd wlan0");
}

# Read mac, essid from file
sub read_known_networks {
    my $file = shift;
    my %HoN;
    open my $fh, "<", $file;
    while (<$fh>) {
        chomp;
        my ( $mac, $essid, $key, $security_type ) = split /,/;
        $HoN{$mac}{essid} = $essid;
        $HoN{$mac}{key}   = $key;
    }
    close $fh;
    return (%HoN);
}

sub available_networks {
    my @scan = @_;
    my ( %cell, %HoC, $mac, $security_type );
    foreach (@scan) {
        if (
m/^\s+Cell\s+\d+\s+-*\s*Address:\s*(([0-9a-fA-F]{2}[:-]{1}){5}([0-9a-fA-F]{2}))/
          )
        {
            $mac           = $1;
            %cell          = ( mac => $mac );
            $security_type = '';
        }
        elsif (m/^\s*ESSID:*\"(.*?)\"/) {
            $HoC{$mac}{essid} = $1;
        }
        elsif (m/^\s*Quality=(\d+)\/(\d+)\s*/) {
            $HoC{$mac}{quality} = $1;
        }
        elsif (m/^\s*Encryption key:(.*?)$/) {
            $HoC{$mac}{encryption} = $1;

            # security type
        }
        elsif (m/IEEE 802.11i\/WPA2 Version 1/) {
            $security_type .= "[WPA2]";
            $HoC{$mac}{security} = $security_type;
        }
        elsif (m/WPA Version 1/) {
            $security_type .= "[WPA]";
            $HoC{$mac}{security} = $security_type;
        }
    }

# iwlist scanning does not indicate explicitly when a network is using WEP security
# Let's deduce this by checking if security is on and WPA or WPA are not involved
    foreach $mac ( keys %HoC ) {
        if ( $HoC{$mac}{security} ) {
        }
        elsif ( $HoC{$mac}{encryption} eq 'off' ) {
            $HoC{$mac}{security} = 'off';
        }
        else {
            $HoC{$mac}{security} = 'WEP';
        }
    }
    return %HoC;
}

sub get_sudo {
    my $sudo_binary = shift;
    my $sudo        = '';
    unless ( $ENV{USER} eq 'root' ) {
        $sudo = $sudo_binary if ( -e $sudo_binary );
    }
    return $sudo;
}

sub bring_up_wireless_interface {
    my $interface = shift;
    my $operstate = get_operstate( $OPERSTATE_SYS_FILE );
    if ( $operstate eq 'down' ) {
        system("$SUDO ip link set wlan0 up");
    }
}

sub wait_for_interface {
    my ( $operstate, $carrier ) = &get_interface_state;
    while (($carrier != 1) && ($carrier!=0)) {
	print "--------------------- carrier != 1 or 0 ------------------\n";
	system("sudo ip link set wlan0 up 2>/dev/null");
	( $operstate, $carrier ) = &get_interface_state;
    }
    while (( $operstate ne 'up') && ( $operstate ne 'down')) {
	print "---- operstate ne 'up' ------------------\n";
	system("sudo ip link set wlan0 up 2>/dev/null");
	( $operstate, $carrier ) = &get_interface_state;
	print "-----------------------------------------\n";
	print "\t==> [ $operstate, $carrier ]\n";
	sleep 1;
    }
}

sub get_interface_state {
    my $operstate = get_operstate( $OPERSTATE_SYS_FILE );
    my $carrier = get_carrier( $CARRIER_SYS_FILE );
    print "operstate = $operstate, carrier = $carrier\n" if $VERBOSE;
    return ( $operstate, $carrier );
}

sub print_message_marv {
    print "==> Detecting if you are at 456 W San Jose or 475 Stanford ...\n";
}

sub get_carrier {
    my $sys_file = shift;
    open( my $fh, '<', $sys_file ) or die "Unable to open $sys_file for reading: $!";
    my $carrier = <$fh>;
    close $fh;
    $carrier = -1 if !defined($carrier);
    chomp( $carrier );
    return $carrier;
}

sub get_operstate {
    my $sys_file = shift;
    open( my $fh, '<', $sys_file ) or die "Unable to open $sys_file for reading: $!";
    chomp(my $operstate = <$fh>);
    close $fh;
    return $operstate;
}
