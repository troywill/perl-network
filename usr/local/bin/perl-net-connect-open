#!/usr/bin/env perl
use warnings;
use strict;
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5/site_perl";
require "perl-net-scan.pm";
require "perl-net-common.pm";

my $VERBOSE         = 1;
my $NUMBER_OF_SCANS = 2;
my $CARRIER_SYS_FILE = '/sys/class/net/wlan0/carrier';
my $OPERSTATE_SYS_FILE = '/sys/class/net/wlan0/operstate';
my $WIRELESS_INTERFACE = 'wlan0';
my $SCAN_COMMAND       = "iwlist ${WIRELESS_INTERFACE} scanning";
my $VIDEO_COMMAND = 'mplayer -zoom -x 640 -y 480 /usr/local/share/mcdonalds.flv';
my @open_networks;

use constant WIRELESS_FILE => '/usr/local/etc/wireless/00';

my $carrier = get_carrier( $CARRIER_SYS_FILE );
bring_up_wireless_interface($WIRELESS_INTERFACE,$OPERSTATE_SYS_FILE);
&wait_for_interface();
my $href = wireless_cell_hash( $SCAN_COMMAND );
my %HoC = %{$href};

my $id = 0;
print_available_cells();

sub print_available_cells {
    my $count = 1;
    foreach my $mac (keys %HoC) {
	my $security_type = $HoC{$mac}{security_type};
	my $essid = $HoC{$mac}{essid};
	if ($security_type eq 'OPEN' ) {
	    print "[$count] $mac: $essid [$security_type]\n";
	    $id++;
	    push @open_networks, $HoC{$mac}{essid};
	    $count++;
	}
    }
}

print "Which open network do you want to connect to? ";
chomp( my $choice = <STDIN> );
exit if ( $choice eq 'q' or $choice eq 'Q' or $choice eq '');
$choice--;
my $command = "iwconfig wlan0 essid '$open_networks[$choice]'";
print "==>$command\n";
system($command);
$command = "dhcpcd wlan0";
print "==>$command\n";
system($command);

sub available_networks_hide {
    my $id = 1;

    my ( %cell, %HoC, $mac, $security_type, @network_scan );
    for (1..$NUMBER_OF_SCANS) {
	@network_scan   = `$SCAN_COMMAND`;
	foreach (@network_scan) {
	    if (
		m/^\s+Cell\s+\d+\s+-*\s*Address:\s*(([0-9a-fA-F]{2}[:-]{1}){5}([0-9a-fA-F]{2}))/
		)
	    {
		$mac           = $1;
		%cell          = ( mac => $mac );
		$security_type = '';
	    }
	    elsif (m/^\s*ESSID:*\"(.*?)\"/) {
		$HoC{$mac}{essid} = $1;
	    }
	    elsif (m/^\s*Quality=(\d+)\/(\d+)\s*/) {
		$HoC{$mac}{quality} = $1;
	    }
	    elsif (m/^\s*Encryption key:(.*?)$/) {
		$HoC{$mac}{encryption} = $1;
	    }
	    elsif (m/IEEE 802.11i\/WPA2 Version 1/) {
		$security_type .= "[WPA2]";
		$HoC{$mac}{security} = $security_type;
	    }
	    elsif (m/WPA Version 1/) {
		$security_type .= "[WPA]";
		$HoC{$mac}{security} = $security_type;
	    }
	}
    }
    # iwlist scanning does not indicate explicitly when a network is using WEP security
    # Let's deduce this by checking if security is on and WPA or WPA are not involved
    foreach $mac ( keys %HoC ) {
	if ( $HoC{$mac}{security} ) {
	}
	elsif ( $HoC{$mac}{encryption} eq 'off' ) {
	    $HoC{$mac}{security} = 'off';
	}
	else {
	    $HoC{$mac}{security} = 'WEP';
	}
	if ( $HoC{$mac}{security} eq 'off' ) {
	    if ( $HoC{$mac}{essid} ne '' ) {
		print "[$id] $mac: $HoC{$mac}{essid}\n";
		$id++;
		push @open_networks, $HoC{$mac}{essid};
	    }
	}
    }
    return %HoC;
}

sub run_video {
    my $command = shift;
    system $command;
}

sub connect_to_open_network {
    my $essid = shift;
    &wait_for_interface();
    print "==> Connecting to open network [$essid]\n";
    system("/usr/sbin/iwconfig wlan0 essid $essid");
    sleep 1;
    system("/usr/sbin/iwconfig wlan0 essid $essid");
    print "DEBUG: check ESSID after doing iwconfig wlan0 essid $essid ...\n"; 
    system("iwconfig wlan0 | grep ESSID");
    &run_dhcpcd( $WIRELESS_INTERFACE );
    &run_video($VIDEO_COMMAND);
    exit;
}

sub run_dhcpcd {
    my $interface = shift;
    my $command = "dhcpcd --rebind ${interface} 2>&1";
    print "==> $command\n";
    open (my $dhcpcd,"$command |") or die "Not able to open dhcpcd";
    my $line1 = <$dhcpcd>;
    print "DEBUG L73: $line1\n";
    $line1 =~ /dhcpcd\[(\d+)\]/;
    my $dhcpcd_pid = $1;
    print "dhcpcd_pid = [$dhcpcd_pid], may want to kill it\n";
    while (my $line = <$dhcpcd>) {
	chomp($line);
	print "line: $line\n";
	if ( $line =~ /carrier lost/ ) {
	    print "BAILING OUT!\n";
	    close $dhcpcd;
	}
    }
    close $dhcpcd if defined($dhcpcd);
}

sub connect_to_network_by_mac {

# %HoH is hash of available wireless cell hashes from external program ( iwlist scanning )
    my ( $mac, $known_macs_ref, $HoH_ref ) = @_;
    my %known_macs_ref = %{$known_macs_ref};
    my %HoH            = %{$HoH_ref};

}

sub connect_to_wep {
    my ( $key, $essid ) = @_;
    print "==> [$key][$essid]\n";
    system("/usr/sbin/iwconfig wlan0 key $key essid $essid");
    sleep 1;
    &run_dhcpcd( $WIRELESS_INTERFACE );
}

sub bring_up_wireless_interface {
    exit;
    my $interface = shift;
    my $operstate = get_operstate( $OPERSTATE_SYS_FILE );
    if ( $operstate eq 'down' ) {
        system("ip link set wlan0 up");
    }
}

sub wait_for_interface {
    my ( $operstate, $carrier ) = &get_interface_state;
    while (($carrier != 1) && ($carrier!=0)) {
	print "--------------------- carrier != 1 or 0 ------------------\n";
	system("ip link set wlan0 up 2>/dev/null");
	( $operstate, $carrier ) = &get_interface_state;
    }
    while (( $operstate ne 'up') && ( $operstate ne 'down')) {
	print "---- operstate ne 'up' ------------------\n";
	system("ip link set wlan0 up 2>/dev/null");
	( $operstate, $carrier ) = &get_interface_state;
	sleep 1;
    }
}

sub get_interface_state {
    my $operstate = get_operstate( $OPERSTATE_SYS_FILE );
    my $carrier = get_carrier( $CARRIER_SYS_FILE );
    return ( $operstate, $carrier );
}

sub print_message_marv {
    print "==> Detecting if you are at 456 W San Jose or 475 Stanford ...\n";
}

sub get_carrier {
    my $sys_file = shift;
    open( my $fh, '<', $sys_file ) or die "Unable to open $sys_file for reading: $!";
    my $carrier = <$fh>;
    close $fh;
    $carrier = -1 if !defined($carrier);
    chomp( $carrier );
    return $carrier;
}

sub get_operstate {
    my $sys_file = shift;
    open( my $fh, '<', $sys_file ) or die "Unable to open $sys_file for reading: $!";
    chomp(my $operstate = <$fh>);
    close $fh;
    return $operstate;
}
