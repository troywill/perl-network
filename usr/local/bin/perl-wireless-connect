#!/usr/bin/env perl
use warnings;
use strict;
my $VERBOSE            = 1;
use constant WIRELESS_FILE => '/usr/local/etc/wireless/00';
my %known_macs         = &read_known_networks(WIRELESS_FILE);
my $WIRELESS_INTERFACE = 'wlan0';
my $SUDO               = &get_sudo('/usr/bin/sudo');
my $SCAN_COMMAND       = "${SUDO} iwlist ${WIRELESS_INTERFACE} scanning";

&bring_up_wireless_interface($WIRELESS_INTERFACE);
print "=> Scanning for available networks ...\n" if $VERBOSE;
my @network_scan   = `$SCAN_COMMAND`;
my %available_macs = &available_networks(@network_scan);

foreach my $mac ( keys %known_macs ) {
    if ( $available_macs{$mac} ) {
        print
          "=> Network '$available_macs{$mac}{essid}' found, connecting ...\n";
        &connect_to_network_by_mac( $mac, \%known_macs, \%available_macs );
        open( my $essid_file, '>', '/tmp/essid' )
          || die "Unable to open /tmp/essid for output";
        print $essid_file "$mac\n";
        close $essid_file;
    }
}

print "DEBUG: Not able to connect to known network, connect to open\n";
my %open_networks =
  ( 'Wayport_Access' => 'McDonalds' );
#  ( 'Wayport_Access' => 'McDonalds', 'attwifi' => 'Starbucks' );

foreach my $mac ( keys %available_macs ) {
    print "==>$mac<==\n";
    if ( $available_macs{$mac}{encryption} eq 'off' ) {
        print "$mac: '$available_macs{$mac}{essid}' is an open network\n";
        print "Let us try to connect to this wireless network\n";
        foreach my $essid ( keys %open_networks ) {
            if ( $essid eq $available_macs{$mac}{essid} ) {
                print "Connecting to open network => $essid\n";
                &connect_to_open_network($essid);
            }
        }
    }
}

sub connect_to_open_network {
    my $essid = shift;
    print "DEBUG: Do not connect if connected!!!!\n";
    print "[$essid]\n";
    system("$SUDO /usr/sbin/iwconfig wlan0 essid $essid");
    system("$SUDO dhcpcd wlan0");
}

system("wget http://71.104.11.111/marvlogin");

sub connect_to_network_by_mac {

# %HoH is hash of available wireless cell hashes from external program ( iwlist scanning )
    my ( $mac, $known_macs_ref, $HoH_ref ) = @_;
    my %known_macs_ref = %{$known_macs_ref};
    my %HoH            = %{$HoH_ref};
    print "ESSID: $HoH{$mac}{essid}\n";
    print "ENCRYPTION: $HoH{$mac}{encryption}\n";
    print "QUALITY: $HoH{$mac}{quality}\n";
    print "SECURITY: $HoH{$mac}{security}\n";

    if ( $HoH{$mac}{security} eq 'WEP' ) {
        my $key = $known_macs{$mac}{key};
        &connect_to_wep( $key, $HoH{$mac}{essid} );
    }
}

sub connect_to_wep {
    my ( $key, $essid ) = @_;
    print "DEBUG: Do not connect if connected!!!!\n";
    print "[$key][$essid]\n";
    system("$SUDO /usr/sbin/iwconfig wlan0 key $key");
    system("$SUDO /usr/sbin/iwconfig wlan0 essid $essid");
    system("$SUDO dhcpcd wlan0");
}

# Read mac, essid from file
sub read_known_networks {
    my $file = shift;
    my %HoN;
    open my $fh, "<", $file;
    while (<$fh>) {
        chomp;
        my ( $mac, $essid, $key, $security_type ) = split /,/;
        $HoN{$mac}{essid} = $essid;
        $HoN{$mac}{key}   = $key;
    }
    close $fh;
    return (%HoN);
}

sub available_networks {
    my @scan = @_;
    my ( %cell, %HoC, $mac, $security_type );
    foreach (@scan) {
        if (
m/^\s+Cell\s+\d+\s+-*\s*Address:\s*(([0-9a-fA-F]{2}[:-]{1}){5}([0-9a-fA-F]{2}))/
          )
        {
            $mac           = $1;
            %cell          = ( mac => $mac );
            $security_type = '';
        }
        elsif (m/^\s*ESSID:*\"(.*?)\"/) {
            $HoC{$mac}{essid} = $1;
        }
        elsif (m/^\s*Quality=(\d+)\/(\d+)\s*/) {
            $HoC{$mac}{quality} = $1;
        }
        elsif (m/^\s*Encryption key:(.*?)$/) {
            $HoC{$mac}{encryption} = $1;

            # security type
        }
        elsif (m/IEEE 802.11i\/WPA2 Version 1/) {
            $security_type .= "[WPA2]";
            $HoC{$mac}{security} = $security_type;
        }
        elsif (m/WPA Version 1/) {
            $security_type .= "[WPA]";
            $HoC{$mac}{security} = $security_type;
        }
    }

# iwlist scanning does not indicate explicitly when a network is using WEP security
# Let's deduce this by checking if security is on and WPA or WPA are not involved
    foreach $mac ( keys %HoC ) {
        if ( $HoC{$mac}{security} ) {
        }
        elsif ( $HoC{$mac}{encryption} eq 'off' ) {
            $HoC{$mac}{security} = 'off';
        }
        else {
            $HoC{$mac}{security} = 'WEP';
        }
    }
    return %HoC;
}

sub get_sudo {
    my $sudo_binary = shift;
    my $sudo        = '';
    unless ( $ENV{USER} eq 'root' ) {
        $sudo = $sudo_binary if ( -e $sudo_binary );
    }
    return $sudo;
}

sub bring_up_wireless_interface {
    my $interface = shift;
    chomp( my $operstate = `cat /sys/class/net/wlan0/operstate` );
    if ( $operstate eq 'down' ) {
        system("$SUDO ip link set wlan0 up");
    }
}
